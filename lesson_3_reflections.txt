Q1:
When would you want to use a remote repository rather than keeping all your work local?

A1:
If I split my work time between the office and home and actually perform my work on
two separate computers, I can use a remote repository to keep my files more easily in
sync.

If I'm working with a team, a remote repository is pretty much a necessity.

If I want some data loss protection, then a remote acts like another backup.

***

Q2:
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

A2:
The remote repo could be updated by someone else, and their code additions
could cause trouble or distract you from work you're currently doing.

***

Q3:
Describe the differences between forks, clones, and branches. When would
you use one instead of another?

A3:
Branches exist within a single repository.
Clones copy an existing repository (local or remote) to a new local repository.
Forks are a GitHub feature that allow GitHub-to-GitHub clones.

I would use branches within a local repository, clones to copy an existing
local or remote repository (such as a fork on Github), and a fork to create
a new instance of a repository on GitHub that I can edit and maintain while
still giving recognition to the original owner.

***

Q4:
What is the benefit of having a copy of the last known state of the remote
stored locally?

A4:
You can pull down other team member's contributions and then access them
off-line for local comparison. Well, and I assume it's always easier to deal
with conflicts locally.
