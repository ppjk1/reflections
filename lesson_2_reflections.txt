Q1:
What happens when you initialize a repository? Why do you need to do it?

A1:
Git adds a .git folder to the directory you created the repository in. If you
want to use version control, you have to initialize the repository. Git won't
know about the repository otherwise.

***

Q2:
How is the staging area different from the working directory and the repository?
What value do you think it offers?

A2:
It's a holding area. It's temporary storage. It's neither the working directory
nor the repository.
It seems like it offers the possibility to only commit certain files from a
working directory into the repository. So you don't have to track everything.
Or if you have multiple branches, you can add some files to one branch, then
swap into another branch and add other files to that one. All from within a
single working directory.

***

Q3:
How can you use the staging area to make sure you have one commit per logical
change?

A3:
Only add modified files to the staging area.

***

Q4:
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

A4:
As noted in the training, when you want to create alternate versions of your
code, or when you want to try a new feature without disrupting the production
codebase. Branches give you this flexibility.

***

Q5:
How do the diagrams help you visualize the branch structure?

A5:
Git log doesn't do a great job with the graphing. So diagramming helps you see
which commits have visibility into which other commits and whether you're
veering off into unsafe territory where you really should create a new branch
to capture your work.

***

Q6:
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

A6:
If the merge is successful, the result will be a new commit at the tip of the
currently checked out branch. The files in the commit will be a composite of
all of the changes in the checked out branch and all of the changes in the
merged branch. That is, additions to either branch will be included. Deletions
from either branch will not be included.

We represent it as two branches combining or merging, because this is what's
occurring with the changes. The new commit really is a composite of both
branches that were merged.

***

Q7:
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

A7:
Automatic merging works great to keep the development process moving without
developers needing to do tons of code reviews of each other's work and hold
meetings/calls each time they have independent changes. Cons? Git doesn't
understand your code the way you do, so it can't make as intuitive decisions as
you yourself might. It may ask you more questions than you'd like about what to
keep and what to throw away. Still, seems like a huge time-saver to me.
